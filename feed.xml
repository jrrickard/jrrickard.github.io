<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code to run, run to live</title>
    <description>A blog about running, software and beverages. Opinions expressed are my own
</description>
    <link>http://jrrickard.github.io/</link>
    <atom:link href="http://jrrickard.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 06 Jun 2016 13:00:44 -0600</pubDate>
    <lastBuildDate>Mon, 06 Jun 2016 13:00:44 -0600</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Working Remotely</title>
        <description>&lt;p&gt;In early January, the majority of the R&amp;amp;D team in my office was laid off in an effort to streamline products and development sites. This included my team and our product &lt;a href=&quot;https://www.vmware.com/cloud-services/management/&quot;&gt;vRealize Air Compliance&lt;/a&gt;. Luckily, I found another position within the company and would be able to stay in Colorado. I’m not working remotely with team members in Palo Alto (California) and Herzliya (Israel). It’s been a big change, to say the least. I kept my desk in the office, but I found myself working from home more and more. I finally decided to give up my desk and covert to a home office.&lt;/p&gt;

&lt;p&gt;The transition has been pretty seemless since I’ve been working from home so much. I was able to bring a couple of monitors home with me and setup my standing desk so I essentially have the same setup as I had at the office!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/standing-desk.jpeg&quot; alt=&quot;Desk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The desk is made from my existing &lt;a href=&quot;http://www.ikea.com/us/en/catalog/products/60193736/&quot;&gt;IKEA Lack Side Tables&lt;/a&gt;, along with a new &lt;a href=&quot;http://www.ikea.com/us/en/catalog/products/S29932181/&quot;&gt;LINNMON / ADILS&lt;/a&gt;. I had to make a few adjustments, but it ended up being essentially the perfect height. My new &lt;a href=&quot;http://www.wasdkeyboards.com/&quot;&gt;WASD Keyboard&lt;/a&gt; is a little bigger than the Apple keyboard I had been using, so most of the adjustment had to be done to the keyboard ledge.&lt;/p&gt;

&lt;p&gt;The room I decided to use as a home office is our “technology” room and already had a PC for my son to use, along with my wife’s knitting and my turntable. Oddly enough, it’s the only room in the house that wasn’t wired with Cat6 when the house was built. My next project is either running ethernet to the room or upgrading the wireless in the house.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Jun 2016 17:32:48 -0600</pubDate>
        <link>http://jrrickard.github.io/2016/06/05/working-remotely.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2016/06/05/working-remotely.html</guid>
        
        
      </item>
    
      <item>
        <title>AWS Lambda and Alexa Skills Kit</title>
        <description>&lt;p&gt;A few months ago, I bought an Amazon Echo because I have a ton of music in the Amazon ecosystem. When they announced the &lt;a href=&quot;https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit&quot;&gt;Alexa Skills Kit&lt;/a&gt;, I was excited to try it out. I had already done a few things with &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt;, so I was already familiar with writing a lambda function. I decided a quick way to try it out would be to implement something with ASK that I had done previously. I recently wrote a bot for Slack using go and one of it’s first functions was to do things with the Rally Web Services API. That seemed like a fun thing to do with the Echo as well. I already ask the Echo for the weather and a couple other things in the morning…what If I could ask it what bugs I have to fix? I created a github repo to store everything I describe below.
I started out by grabbing the &lt;a href=&quot;https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/using-the-alexa-skills-kit-samples&quot;&gt;reference skills&lt;/a&gt;. I already had a develoepr account, so once I had the reference skills I was able to register them on the develoepr portal and try them out. Developing a skill turns out to be &lt;strong&gt;REALLY&lt;/strong&gt; simple. You basically come up with an interaction model, write some JavaScript, upload it to AWS, do a little configuration and it’s ready to go.&lt;/p&gt;

&lt;p&gt;Using the references as a starting point, I came up with an interaction model. The first thing I would implement with the Rally API was fetching my defects. The recommended interaction design is to ask your service for something. You might say, “Alexa, ask &lt;invocation name=&quot;&quot;&gt; for &lt;intent trigger=&quot;&quot;&gt;. I originally started out with &quot;my current defects&quot; for the intent trigger, but it was more natural for me to say bugs so I went with that. Getting bugs from the Echo would be:&lt;/intent&gt;&lt;/invocation&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Alexa, ask Rally for my current bugs
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rally would become the Invocation Name. We’ll look at configuring that in a minute.&lt;/p&gt;

&lt;p&gt;Now it was time to implement my lambda function. I had two choices here, I could implement a client for the Rally WS API myself, or use the &lt;a href=&quot;https://github.com/RallyTools/rally-node&quot;&gt;unsupported Node.js library&lt;/a&gt; that Rally developed. I went with the library to avoid reinventing the wheel. It’s easy to use Node libraries with Lambda, you just need to delivery the library with the Lambda function. The easiest way to do this is to run the npm install and specify a prefix so that it installs in the same directory as your lambda code. Then you can simply zip up the entire directory and upload that to the AWS console. In my case, I had created a directory called “rally-tasks-for-echo” and a “src” directory under that to hold all the JavaScript. Installing the node library was just:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
fermat:rally-tasks-for-echo jeremy$ npm install --prefix=src rally
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, when I looked in the src directory, I had a node_modules subdirectory with the Rally library and the associated dependencies.&lt;/p&gt;

&lt;p&gt;Next, I needed a way to configure the Lambda. I decided to create a JSON document with my read-only Rally key, my project ID and my username and stoer that in S3. This ended up being a really easy way to store the configuration. Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
{
        &quot;key&quot; : &quot;INSERT_RALLY_KEY&quot;,
        &quot;projectID&quot; : &quot;INSERT_RALLY_PROJECT_ID&quot;,
        &quot;user&quot; : &quot;INSERT_USERNAME&quot;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The actual Lambda function is pretty simple, so I won’t go into it much here. Simply zip up the directory with the source code and keep the file handy. Once it was written I had to configure both the Lambda and the Skill. Once all the configuration is done, I need to come back and update the source code with the appId of the skill. The Lambda should be first.&lt;/p&gt;

&lt;p&gt;First, login to the AWS Console. Then Click on the Lambda link. It’s also important to make sure you are using the us-east region, as the other regions are not supported for ASK yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/lambda-option.png&quot; alt=&quot;aws console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then create a new Lambda function. I skipped the blueprint and just went with a blank configuration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/create-lambda.png&quot; alt=&quot;new function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, name the function and pick Node.js as the Runtime.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/configure-function.png&quot; alt=&quot;configure-function-step-one&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Change the code entry type to “Upload a ZIP File” and click the Upload button and locate your file.&lt;/p&gt;

&lt;p&gt;Once uploaded, keep the Handler as index.handler, that matches up against the handler function defined in index.js. For role, I selected the basic Lambda exeuction policy and that seemed sufficient.&lt;/p&gt;

&lt;p&gt;The major thing I had to change was the default timeout period for the function. The Rally API can take a few seconds to return, so I upped the timeout to 20 seconds. Probably more than needed but I wanted to be safe. Something to consider is that based on Lambda pricing, increasing the timeout could have a cost impact. I don’t think that I’ll exceed the free invocation limits so I wasn’t too worried about it here.&lt;/p&gt;

&lt;p&gt;The final bit of configuration for the Lambda function is to add an event source to it. Edit the function by clicking on it’s name, then click the “Event sources” tab and click “Add event source” once that loads. Select Alexa Skills Kit from the Event source type drop down, then click submit.&lt;/p&gt;

&lt;p&gt;Now the Lambda is configured. Now go to the Alexa Developer Portal (https://developer.amazon.com/edw/home.html#/) and click Alexa, then Get Started under Alexa Skills Kit. Pick a name for the skill and an invocation name. As I mentioned above, I picked Rally for my invocation name. I also used that as the name. I also entered the ARN from my Lambda function here. Copy the Application Id on this page for use later. We’ll need to add that to the skill lambda code.&lt;/p&gt;

&lt;p&gt;Next, I copy and pasted the contents of the speechAssets files into the text fields on the next screen.&lt;/p&gt;

&lt;p&gt;Now that the skill is set up, I should have an application id associated with it.  Take the application id and paste it into the source code from the git repo above, replacing the template value that is there. Upload the code again and you should be able to test it with your Echo.&lt;/p&gt;

&lt;p&gt;Here is mine:&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/KfkRT0aDw5o&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</description>
        <pubDate>Mon, 14 Sep 2015 07:49:23 -0600</pubDate>
        <link>http://jrrickard.github.io/2015/09/14/aws-lambda-and-alexa-skills-kit.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2015/09/14/aws-lambda-and-alexa-skills-kit.html</guid>
        
        
      </item>
    
      <item>
        <title>Headless Selenium Test With Docker Jenkins Slave</title>
        <description>&lt;p&gt;In an earlier blog post, I wrote about building Docker based jenkins slaves. I used that to automate deployment of our system and clients from Jenkins. With that working, I wanted to apply the same to running some of our UI automation. We’re currently using a series of Windows virtual machines as remote slaves and Sikuli based tests. The downside to these tests is that they are based on image capture and actually driving a browser, so we can only one run at a time per slave and they can fail if resolution of the VM is changed or something is launched that is on top of the browser. One fix for this would be to use something like selenium instead. I implemented a subset of the tests using selenium and I’ve been able to run these on my laptop using the Firefox browser just fine.&lt;/p&gt;

&lt;p&gt;With the tests running with selenium, I wondered if we could run them headlessly via the Docker slave mechanism. To do that, I needed a new slave image. Starting with the evarga/jenkins-slave base image, I installed maven, git, firefox and xfvb. I also generated an ssh key, registered it with our git instance and then added it to the container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM evarga/jenkins-slave:latest

ENV DEBIAN_FRONTEND noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN true

#===================
# Timezone settings
# Possible alternative: https://github.com/docker/docker/issues/3359#issuecomment-32150214
#===================
ENV TZ &quot;US/Mountain&quot;
RUN echo &quot;US/Mountain&quot; | sudo tee /etc/timezone \
  &amp;amp;&amp;amp; dpkg-reconfigure --frontend noninteractive tzdata

#==============
# Xvfb, firefox, maven, git
#==============
RUN apt-get update -qqy \
  &amp;amp;&amp;amp; apt-get -qqy install \
    xvfb firefox maven git \
  &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

#============================
# Some configuration options, same size as MacBook display
#============================
ENV SCREEN_WIDTH 1680
ENV SCREEN_HEIGHT 1050
ENV SCREEN_DEPTH 24
ENV DISPLAY :99.0

COPY id_rsa /home/jenkins/.ssh/
COPY id_rsa.pub /home/jenkins/.ssh/
RUN chown jenkins /home/jenkins/.ssh/
RUN chmod 600 /home/jenkins/.ssh/id_rsa
USER jenkins
RUN ssh-keyscan qeconfig.wp.fsi &amp;gt;&amp;gt; /home/jenkins/.ssh/known_hosts
RUN chmod 600 /home/jenkins/.ssh/id_rsa.pub
RUN chmod 600 /home/jenkins/.ssh/known_hosts
USER root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When all is said and done, that’s a fairly large image. Again, starting from scratch might lead to a smaller image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jeremy@euclid [ ~/ui-test ]$ sudo docker images
REPOSITORY             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ui-test.slave          latest              f06dd6a0ba85        35 seconds ago      832.2 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the image created, I followed the same process of adding a new template to the Docker cloud defined in Jenkins. Then created a new job.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/docker-label.png&quot; alt=&quot;Job config&quot; /&gt;
&lt;img src=&quot;http://jrrickard.github.io/images/shell-commands.png&quot; alt=&quot;Shell commands&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Sep 2015 08:15:57 -0600</pubDate>
        <link>http://jrrickard.github.io/2015/09/07/headless-selenium-tests-with-docker-jenkins-slave.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2015/09/07/headless-selenium-tests-with-docker-jenkins-slave.html</guid>
        
        
      </item>
    
      <item>
        <title>Using Octopress 3.0 with Github Pages</title>
        <description>&lt;p&gt;This blog has been dormant for a while. I was using a fairly old version of octopress and at some point ended up corrupting my repo. Then I got way to busy with the &lt;a href=&quot;http://vrealizeair.vmware.com/compliance&quot;&gt;vRealize Air Compliance&lt;/a&gt; to fix it. Now that we’ve released, I thought it was time to get this thing running again.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/octopress/octopress&quot;&gt;Octopress 3.0&lt;/a&gt; is available on github, so I thought I’d try that out. Rather than try and upgrade my existing instance, I went ahead and killed my github pages repo and start from scratch there. I also had a new Macbook, so I might as well try and set everything up from scratch.&lt;/p&gt;

&lt;h1 id=&quot;step-one-create-a-new-repo&quot;&gt;Step one, create a new repo&lt;/h1&gt;

&lt;p&gt;To use github pages, you create a repo of the form username.github.io. In my case, that was jrrickard.github.io. Next, I followed the &lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages/&quot;&gt;Usng Jekyll with Pages&lt;/a&gt; page to get started up to the “Running Jekyll” section of the page.&lt;/p&gt;

&lt;h1 id=&quot;step-two-get-octopress&quot;&gt;Step two, get Octopress&lt;/h1&gt;

&lt;p&gt;I modified the Gemfile created above and added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;octopress&#39;, &#39;~&amp;gt; 3.0.0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once I did that, I did a bundle update &amp;amp;&amp;amp; bundle install to make sure I had the new gem. Now I had the octopress cli. This has been &lt;em&gt;much&lt;/em&gt; easier to use than the previous version of octopress. Now I had everything installed, I needed to init the new blog. You can do that with Jekyll, or you can use the octopress cli and it will also copy over all the octopress scaffolding. I went with the octopress:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# octopress new jrrickard.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That created a new directory called jrrickard.github.io with the scaffolding. Next I changed into that diretory and did a jekyll build&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# jekyll build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This went through the directory and created the _site directory with all of the content of the blog. Now I could serve it up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# jekyll serve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This started up a server listening on port 4000 so I could view the content.&lt;/p&gt;

&lt;p&gt;The last step of getting it setup was doing the deploy init. Again, very easy with the octopress cli:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# octopress deploy init git git@github.com:jrrickard/jrrickard.github.io.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once that was done, I added the _deploy.yml file to my .gitignore. Once I was done, the .gitignore looked like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_site
.sass-cache
_deploy.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, running deploy with the octopress cli pushed to my git repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# octopress deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the new blog was available at my Github pages url. Now I just needed content!&lt;/p&gt;

&lt;h1 id=&quot;step-three-move-all-the-old-content&quot;&gt;Step three, move all the old content.&lt;/h1&gt;

&lt;p&gt;This part was simple. I still had all the markdown and image files from my original blog, so I moved them over to this new directory structure and put the existing markdown files in the _posts directory. I created an images folder and copied all the images over into that one. Once I ran the jekyll build to regenerate everything, I noticed I didn’t have the old octopress img plugin installed. I went ahead and replaced those with normal markdown and the Jekyll site.url template (make sure you update your _config.yaml to have that correctly defined).&lt;/p&gt;

&lt;h1 id=&quot;step-four-new-posts&quot;&gt;Step four, new posts!&lt;/h1&gt;

&lt;p&gt;While my blog was messed up, I had done a few gist based blogs. I wanted to move them over here, so I used the cli to create some new posts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# octopress new blog &quot;Running lattice.cf on VMware AppCatalyst&quot;
# octopress new blog &quot;Creating a Docker Jenkins Slave Running on a VMware Photon VM&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This created two new files in the _posts directory with that title and today’s date. It sticks the correct header/front matter in a blank file. So I modified the filename to have the correct dates and updated the date meta data in the file. Then I simply copied the markdown from the Gists and placed them in the appropriate file. The only major change I had to do was to change the Github markdown preformat token (three `) to normal markdown (4 ~). Once I had done that, getting everything deployed again was simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# jekyll build
# octopress deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then voila, the blog is updated. Simple.&lt;/p&gt;

</description>
        <pubDate>Fri, 04 Sep 2015 20:14:30 -0600</pubDate>
        <link>http://jrrickard.github.io/2015/09/04/installing-octopress-3-0.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2015/09/04/installing-octopress-3-0.html</guid>
        
        
      </item>
    
      <item>
        <title>Creating a Docker Jenkins Slave Running on a VMware Photon VM</title>
        <description>&lt;p&gt;Let’s setup a Docker based Jenkins slave using VMware Photon (currently using Tech Preview #2) as the docker host.&lt;/p&gt;

&lt;p&gt;This assumes you have Jenkins installed.&lt;/p&gt;

&lt;h2 id=&quot;install-jenkins-plugins&quot;&gt;Install Jenkins Plugin(s)&lt;/h2&gt;

&lt;p&gt;First, let’s install the Jenkins &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Docker+Plugin&quot;&gt;Docker Plugin&lt;/a&gt;, plus all of it’s dependencies (if you don’t already have them):
 * &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Durable+Task+Plugin&quot;&gt;Durable Task&lt;/a&gt;
 * &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Token+Macro+Plugin&quot;&gt;Token Macro&lt;/a&gt;
 * &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/SSH+Slaves+plugin&quot;&gt;SSH Slaves&lt;/a&gt;
 * &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/SSH+Credentials+Plugin&quot;&gt;SSH Credentials&lt;/a&gt;
 * &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Credentials+Plugin&quot;&gt;Credentials&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-photon&quot;&gt;Install Photon&lt;/h2&gt;

&lt;p&gt;Next, let’s grab the &lt;a href=&quot;https://bintray.com/vmware/photon/iso/1.0TP2/view&quot;&gt;Photon 1.0 TP2 ISO&lt;/a&gt;, create a new virtual machine and use the Photon ISO to install. I did the full install, but the minimal would probably work as well. My full install took 70 seconds.&lt;/p&gt;

&lt;p&gt;Once installed, open the console to the VM using the vSphere Web Client and log into the VM. By default, a Photon installation doesn’t allow root to SSH into the VM. So let’s create a user to do the work we need to do.&lt;/p&gt;

&lt;p&gt;First, let’s enable sudo access by using visudo to edit the sudoers file. 
Find this block in the sudoers file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## Uncomment to allow members of group wheel to execute any command
#%wheel ALL=(ALL) ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And uncomment the second line (#%wheel ALL=(ALL) ALL.&lt;/p&gt;

&lt;p&gt;Next, let’s add a user with useradd:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root [ / ]$ useradd --create-home --shell=/bin/bash jeremy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, add it to the wheel group:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root [ / ]$  usermod -aG wheel jeremy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now set it’s password:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root [ / ]$ passwd jeremy
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;docker-config&quot;&gt;Docker Config&lt;/h2&gt;

&lt;p&gt;Now you should be able to login via your favorite means of sshing. Now let’s move on to setting up the VM as a Docker based Jenkins slave.&lt;/p&gt;

&lt;p&gt;Note that by default, a user created above has very limited privileges. So most of the following commands are done via sudo.&lt;/p&gt;

&lt;p&gt;First, let’s enable docker.  :
~~~~
jeremy@euclid [ ~ ]$ sudo systemctl start docker
jeremy@euclid [ ~ ]$ sudo systemctl enable docker
~~~~&lt;/p&gt;

&lt;p&gt;Now let’s enable remote management of Docker so Jenkins can connect. To do this, we need to modify  /etc/systemd/system/multi-user.target.wants/docker.service and enable remote access to the Docker api. This is normally turned off. Really, this is the most Photon specific part of this entire gist. You’ll see the location of that file when you execute the systemctl enable docker command above. Find the ExecStart line and edit it like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ExecStart=/bin/docker -d -s overlay -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, reload the systemctl daemon and restat the Docker daemon:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jeremy@euclid [ ~ ]$ sudo systemctl daemon-reload
jeremy@euclid [ ~ ]$ sudo systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;configure-jenkins-and-docker-slave&quot;&gt;Configure Jenkins and Docker Slave&lt;/h2&gt;

&lt;p&gt;Now, let’s grab the ready made Jenkins slave image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jeremy@euclid [ ~ ]$ sudo docker pull evarga/jenkins-slave
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should have the slave image:
~~~~
jeremy@euclid [ ~ ]$ sudo docker images
REPOSITORY             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
evarga/jenkins-slave   latest              8880612971b0        8 months ago        610.7 MB
~~~~&lt;/p&gt;

&lt;p&gt;I’m going to use this to deploy our application which is currently packaged as an OVA, so I will use the jenkins-slave image as the base for my new image. Then I will install ovftool along with python because we already have some deploy automation with it. Here is my new Dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM evarga/jenkins-slave:latest

RUN mkdir -p /opt/vmware
COPY pycaaso.py /opt/vmware/
COPY scale-weekly.conf /opt/vmware/
RUN apt-get install python -y
RUN mkdir -p /opt/ovftool
ADD VMware-ovftool-4.1.0-2459827-lin.x86_64.bundle /opt/ovftool/
RUN yes | /bin/bash /opt/ovftool/VMware-ovftool-4.1.0-2459827-lin.x86_64.bundle --required --console \
    &amp;amp;&amp;amp; rm -f /opt/ovftool/VMware-ovftool-4.1.0-2459827-lin.x86_64.bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, rebuild it and tag it so we can use it from Jenkins:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jeremy@euclid [ ~ ]$ sudo docker build -t jenkins-slave2 .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can go configure Jenkins. The Docker plugin makes your docker slaves available as a remote cloud, not as remote nodes. So when you configure, you don’t actually use the normal add remote node workflow that you’d do if you were adding a traditional Windows or Linux remote slave. To configure the Docker connectivity, first login to Jenkins and click Manage Jenkins:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/114b8c35b1d5306ff3e0/raw/d7d915e03c4835e0d99a27594a65559ed907f72c/manage-jenkins.png&quot; alt=&quot;mange jenkins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then click Configure System:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/114b8c35b1d5306ff3e0/raw/9ecf828f23dd1133448a104e0dca0297dff64e6c/configure-system.png&quot; alt=&quot;configure system&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then scroll down to Cloud and Click Add New Cloud, then Select Docker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/114b8c35b1d5306ff3e0/raw/d7d915e03c4835e0d99a27594a65559ed907f72c/cloud-add-new-cloud.png&quot; alt=&quot;add new cloud&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/114b8c35b1d5306ff3e0/raw/d7d915e03c4835e0d99a27594a65559ed907f72c/pick-docker.png&quot; alt=&quot;pick docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That should give you a blank entry form to configure the Docker cloud.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/114b8c35b1d5306ff3e0/raw/d7d915e03c4835e0d99a27594a65559ed907f72c/blank-docker-config.png&quot; alt=&quot;blank docker entry&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the relevant configuration for your system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/114b8c35b1d5306ff3e0/raw/6c8284d1dee92d3c8eb9a1f7565832549b8b1000/docker-jenkins-config.png&quot; alt=&quot;my system&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then create an image that matches our jenkins slave image. The defaults largely work here if you used the base image above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/114b8c35b1d5306ff3e0/raw/d7d915e03c4835e0d99a27594a65559ed907f72c/jenkins-docker-image.png&quot; alt=&quot;configure an image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice the label here. This is what you will is used to match Jenkins jobs to the docker setup. I also checked the “Docker Container” checkbox and the “Clean local images” checkbox. This should instruct Docker to clean up after itself.&lt;/p&gt;

&lt;p&gt;Next, go create a job.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/114b8c35b1d5306ff3e0/raw/d52762c15357eee01b7b17fd89b10b21710c3139/deploy-job-config.png&quot; alt=&quot;create a job&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As mentioned, the crucial part here is to put the label entered in the Docker image config in the “Label Expression” text box and check “Restrict where this project can be run”. The label here needs to match what was entered in the earlier image config.&lt;/p&gt;

&lt;p&gt;Now when you run your job, it should execute within the Docker container. Here is my job:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/114b8c35b1d5306ff3e0/raw/4d3ee2aca02c53d4736ef3bba1bac9a7cc25578c/built-on-docker.png&quot; alt=&quot;built on docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some additional things to consider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No authentication on that docker connection, I might update this later with changes to that, ideally with TLS.&lt;/li&gt;
  &lt;li&gt;Might be able to build smaller images if you start with something other than the turn key image referenced above&lt;/li&gt;
  &lt;li&gt;The use here isn’t really a compelling story, my next docker slave will run a headless firefox browser to do automated testing of our UI. I’ll blog that next&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 03 Sep 2015 20:13:27 -0600</pubDate>
        <link>http://jrrickard.github.io/2015/09/03/creating-a-docker-jenkins-slave-running-on-a-vmware-photon-vm.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2015/09/03/creating-a-docker-jenkins-slave-running-on-a-vmware-photon-vm.html</guid>
        
        
      </item>
    
      <item>
        <title>Running lattice.cf on VMware AppCatalyst</title>
        <description>&lt;p&gt;I’ll preface this by saying I don’t think any of this is supported and AppCatalyst is a Tech Preview. But it’s a great developer tool!&lt;/p&gt;

&lt;p&gt;First, install &lt;a href=&quot;https://communities.vmware.com/community/vmtn/devops/vmware-appcatalyst&quot;&gt;AppCatalyst&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, install the &lt;a href=&quot;https://github.com/vmware/vagrant-vmware-appcatalyst&quot;&gt;AppCatalyst Vagrant Provider&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Vagrant Provider needs the AppCatalyst REST API, so once installed, you need to start the AppCatalyst daemon: appcatalyst-daemon&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/a2724c9ede44de0186cc/raw/f63b7706bef41312eb9ad7a947e2f72e4dde94c1/start_deamon.png&quot; alt=&quot;start daemon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, follow the &lt;a href=&quot;http://lattice.cf/docs/getting-started/&quot;&gt;Lattice.cf getting started guide&lt;/a&gt;, including installing ltc.&lt;/p&gt;

&lt;p&gt;Once you get everything installed, the only real issue I had was networking.&lt;/p&gt;

&lt;p&gt;The default subnet for AppCatalyst is 192.168.136.0, per Library/Preferences/VMware AppCatalyst/networking:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;answer VNET_8_HOSTONLY_NETMASK 255.255.255.0
answer VNET_8_HOSTONLY_SUBNET 192.168.136.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, the Vagrantfile looks for an environment variable that contains the Lattice IP or it defaults to 192.168.11.11. The IP seems to increment by 1 for each new virtual machine in AppCatalyst, so my next IP would have been 192.168.136.133.&lt;/p&gt;

&lt;p&gt;So finally, I launched the vagrant box with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LATTICE_SYSTEM_IP=192.168.136.133 vagrant up --provider=vmware_appcatalyst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/a2724c9ede44de0186cc/raw/e831083aef54bcfcb9a38de1878a158cd8ff11ae/vagrant-up.png&quot; alt=&quot;vagrant up&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once that was up, run the ltc target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jrickard-mbpro:lattice jrickard$ ltc target 192.168.136.133.xip.io
Api Location Set
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I launched the sample lattice-app.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jrickard-mbpro:lattice jrickard$ ltc create lattice-app cloudfoundry/lattice-app
No port specified, image metadata did not contain exposed ports. Defaulting to 8080.
No working directory specified, using working directory from the image metadata...
Monitoring the app on port 8080...
No start command specified, using start command from the image metadata...
Start command is:
/lattice-app
Creating App: lattice-app...................
06/22 19:54:01.92 [APP|0] Successfully created container
06/22 19:54:02.22 [APP|0] {&quot;timestamp&quot;:&quot;1435024442.223613262&quot;,&quot;source&quot;:&quot;lattice-app&quot;,&quot;message&quot;:&quot;lattice-app.lattice-app.starting&quot;,&quot;log_leve
l&quot;:1,&quot;data&quot;:{&quot;port&quot;:&quot;8080&quot;}}
06/22 19:54:02.22 [APP|0] {&quot;timestamp&quot;:&quot;1435024442.223858833&quot;,&quot;source&quot;:&quot;lattice-app&quot;,&quot;message&quot;:&quot;lattice-app.lattice-app.up&quot;,&quot;log_level&quot;:1,&quot;data&quot;:{&quot;port&quot;:&quot;8080&quot;}}
06/22 19:54:02.75 [HEALTH|0] healthcheck passed
06/22 19:54:02.75 [HEALTH|0] Exit status 0
lattice-app is now running.
App is reachable at:
http://lattice-app.192.168.136.133.xip.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/a2724c9ede44de0186cc/raw/77b99e563818b87bc279a4b32052182de100ebff/ltc-target_and_ltc-create.png&quot; alt=&quot;targeted&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s fire up a browser and hit http://lattice-app.192.168.136.133.xip.io&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gist.github.com/jrrickard/a2724c9ede44de0186cc/raw/c6289cc2872f9ba7014bb76cb54d3ce0ef5348be/lattice_app.png&quot; alt=&quot;we have app&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 23 Jun 2015 19:12:53 -0600</pubDate>
        <link>http://jrrickard.github.io/2015/06/23/running-lattice-cf-on-vmware-appcatalyst.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2015/06/23/running-lattice-cf-on-vmware-appcatalyst.html</guid>
        
        
      </item>
    
      <item>
        <title>Standing Desk</title>
        <description>&lt;p&gt;While I was still at Lockheed, I  made the switch from a chair to a stability ball at work. I prefer it to the chair now and siat on it almost exclusively. I had seen a few people that have made standing desks out of books / etc and they all prefer them, so I did some reading and decided I wanted to convert my desk.&lt;/p&gt;

&lt;p&gt;We made a quick trip to IKEA today to pick up some supplies to build a standing desk based on &lt;a href=&quot;http://theimaginaryzebra.blogspot.com/2012/10/my-diy-standing-deskthe-2231-ikea-hack.html&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;a-couple-of-differences&quot;&gt;A couple of differences:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;LACK tables are high gloss white, so they will work like a whiteboard&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I covered the shelf with a piece of &lt;a href=&quot;http://www.homedepot.com/p/Thrifty-White-32-sq-ft-Hardboard-Panel-Board-709106/202090193#.UTlkj3wjrMA&quot;&gt;panel board&lt;/a&gt; from home depot…which will also work like a whiteboard.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything fit pretty well and day one went well. When I decided to do this, I wasn’t thinking about the fact that I’d be able to easily just glance over at Pikes Peak, but that was a pretty nice bonus. My feet were a little sore by the time I left, but I expected that (minimal shoes). I also felt really productive, although I’m not sure the desk is why. The whiteboard tables proved to be a fantastic idea as well. It’s now been over a year since I changed over to standing all the time. I’ve also obviously changed companies (and desks). The height I drilled everything for was my desk at LM. My VMware desk is slightly shorter, so I ended up using a couple packs of post-it notes and a couple CDs to prop up my keyboard tray. Other than that, it works just the same. The whiteboard aspect of the desk is my absolute favorite part.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Dec 2014 21:01:00 -0700</pubDate>
        <link>http://jrrickard.github.io/work/office/cubicle/2014/12/31/standing-desk.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/work/office/cubicle/2014/12/31/standing-desk.html</guid>
        
        
        <category>work</category>
        
        <category>office</category>
        
        <category>cubicle</category>
        
      </item>
    
      <item>
        <title>one year later</title>
        <description>&lt;p&gt;Next Tuesday will mark my one year anniversary with VMware and I still love it as much as I did the first day.&lt;/p&gt;

&lt;p&gt;Some of the things I’ve done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Went to RADIO&lt;/li&gt;
  &lt;li&gt;Got to see the amazing Palo Alto campus&lt;/li&gt;
  &lt;li&gt;Wrote a whole bunch of ExtJS code and submitted some ExtJS bugs&lt;/li&gt;
  &lt;li&gt;Wrote a bunch more Java&lt;/li&gt;
  &lt;li&gt;Wrote some python!&lt;/li&gt;
  &lt;li&gt;Gave a company wide (well, via WebEx) presentation on D3.js&lt;/li&gt;
  &lt;li&gt;Worked on vCOps a little&lt;/li&gt;
  &lt;li&gt;Build and managed a lab for the team with tiny Intel NUC boxes that gets a suprising amount of use (customer demos!)&lt;/li&gt;
  &lt;li&gt;Volunteered with a bunch of people from the office on a Waldo Canyon Burn Scar restoration project&lt;/li&gt;
  &lt;li&gt;And last, but not least, helped develop a &lt;a href=&quot;https://www.youtube.com/watch?v=-Au0eec2hkU&quot;&gt;brand new Software-as-a-Service offering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m excited to see what the next year holds. It doesn’t feel like a year, so I was pretty surprised when I got an email from the &lt;a href=&quot;http://www.vmware.com/company/foundation&quot;&gt;VMware Foundation&lt;/a&gt; congratulating me and giving me my one year of service charitable giving gift!&lt;/p&gt;

</description>
        <pubDate>Wed, 22 Oct 2014 20:12:04 -0600</pubDate>
        <link>http://jrrickard.github.io/vrac,/work/2014/10/22/one-year-later.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/vrac,/work/2014/10/22/one-year-later.html</guid>
        
        
        <category>vrac,</category>
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>3D Print All The Things</title>
        <description>&lt;p&gt;When Josh and I got accepted to our &lt;a href=&quot;http://cto.vmware.com/radio-a-different-kind-of-high-performance/&quot;&gt;Internal R&amp;amp;D Conference&lt;/a&gt;, I bought two &lt;a href=&quot;http://www.intel.com/content/www/us/en/nuc/nuc-kit-d54250wyk.html&quot;&gt;Intel NUC&lt;/a&gt; boxes to run ESX and a few VMs on. After RADIO was over, I kept them on my desk at work and they turned out to be super useful for the project we’re working on right now. So useful that we ended up supplementing them with a small NAS and two more NUC boxes. Now we have a little mini lab sitting on my desk with 64 GB of RAM, 4 4th generation Intel® Core™ i5-4250U processors, a terabyte of Solid State Storage and 4 Terabytes of spinning disks. Pretty impressive for the size and energy footprint. The processors are obviously the short pole in the tent, but it’s been working very well for a little test enviroment running the vCenter Appliance, the new Log Insight (which is totally awesome), a few instances of our project and a couple of random Ubuntu Virtual machines.&lt;/p&gt;

&lt;p&gt;The only problem is that now I had four NUCs and a NAS just sitting on my desk. The NUC boxes have little rubber feet and sit on each other well but we thought we could do better. And we had a 3D printer in the office.&lt;/p&gt;

&lt;p&gt;So we designed a rack for the NUCs!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/nuc_rack.jpg&quot; alt=&quot;nuc rack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An earlier incarnation of the rack next to the Synology NAS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/desklab.jpeg&quot; alt=&quot;desk lab&quot; /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The rack is six pieces: four identical legs and two identical base plates (top and bottom). Once assembled, you get a nice little rack that holds 4 NUC boxes and also provides a little more airflow.&lt;/p&gt;

&lt;p&gt;I placed the STL files for both parts in a &lt;a href=&quot;https://github.com/jrrickard/NUC-RACK&quot;&gt;github repository&lt;/a&gt;. The cool part of this is that last year, github added the ability to &lt;a href=&quot;https://github.com/blog/1465-stl-file-viewing&quot;&gt;view STL files&lt;/a&gt; using a combination of Three.js and WebGL, so you can preview the pieces directly from the github repo.&lt;/p&gt;

&lt;p&gt;Here are a couple of screen shots from my browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/github-stl-rack-legs.png&quot; alt=&quot;stl file for rack legs&quot; /&gt;
&lt;img src=&quot;http://jrrickard.github.io/images/github-baseplate-stl.png&quot; alt=&quot;stl file for the baseplate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’d like to make a version of this, grab the STL files and adjust the leg pieces for the number of NUCs you have. This supports four and was about the maximum we could print on our printer. Once you print the pieces, the legs pop into the slots on the base plates. Each leg has small platforms that the rubber feet on the NUC will rest on. You could even take these pieces and make them a little bigger with your favorite CAD program (we used &lt;a href=&quot;http://www.tinkercad.com&quot;&gt;Tinkercad&lt;/a&gt; to make these) and use them to hold something with a similar form factor, like a Mac Mini.&lt;/p&gt;

&lt;p&gt;For comparison, here is a piece on a 7.5-inch by 4.75-inch &lt;a href=&quot;http://fieldnotesbrand.com/&quot;&gt;Field Notes&lt;/a&gt; Arts &amp;amp; Science notebook.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/rack_piece.jpg&quot; alt=&quot;a printed rack piece&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Aug 2014 18:45:28 -0600</pubDate>
        <link>http://jrrickard.github.io/3d-printing,nuc,lab/2014/08/05/3d-print-all-the-things.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/3d-printing,nuc,lab/2014/08/05/3d-print-all-the-things.html</guid>
        
        
        <category>3d-printing,nuc,lab</category>
        
      </item>
    
      <item>
        <title>charts</title>
        <description>&lt;p&gt;I’m going to be doing a &lt;a href=&quot;http://d3js.org/&quot;&gt;D3.js&lt;/a&gt; related tech talk at work at the end of July, so I’m building up a set of examples. Three days ago, I saw a &lt;a href=&quot;http://bl.ocks.org/jrrickard/b997968320a7674ce49f&quot;&gt;kickstarter campaign&lt;/a&gt; to “bring back” Reading Rainbow. As of today (9:51 PM MDT…05/30/2014), they’ve almost passed 3 million dollars.&lt;/p&gt;

&lt;p&gt;I was curious where the backers clustered (many small backers? even split?) so I did made a &lt;a href=&quot;http://bl.ocks.org/jrrickard/b997968320a7674ce49f&quot;&gt;quick bar chart&lt;/a&gt; of pledge amount vs backer count using D3.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/bar_chart.png&quot; alt=&quot;a bar chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As an update, I grabbed the data again and made a &lt;a href=&quot;http://bl.ocks.org/jrrickard/7675229d0437594663a6&quot;&gt;Sankey diagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/sankey.png&quot; alt=&quot;a sankey diagram&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 30 May 2014 21:45:32 -0600</pubDate>
        <link>http://jrrickard.github.io/2014/05/30/charts.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2014/05/30/charts.html</guid>
        
        
      </item>
    
  </channel>
</rss>
