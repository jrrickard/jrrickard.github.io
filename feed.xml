<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code to run, run to live</title>
    <description>A blog about running, software and beverages. Opinions expressed are my own
</description>
    <link>http://jrrickard.github.io/</link>
    <atom:link href="http://jrrickard.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 17 Jul 2017 10:59:31 -0600</pubDate>
    <lastBuildDate>Mon, 17 Jul 2017 10:59:31 -0600</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>One Bag</title>
        <description>&lt;p&gt;I&amp;#39;ve spent most of my career working either at a remote site (i.e. not the HQ or where customers are) or remotely (i.e. from home), so I&amp;#39;ve had to travel a good amount. This year I&amp;#39;ve done more than I have in quite a while so I thought I&amp;#39;d try to streamline my travel process. I&amp;#39;ve decided to try and adopt &lt;a href=&quot;https://www.onebag.com/&quot;&gt;one bag&lt;/a&gt; travel in order to make my actual travel days a little easier. I decided to try out the &lt;a href=&quot;https://www.nomatic.com/pages/nomatic-travel-bag&quot;&gt;Nomatic&lt;/a&gt; travel bag to satisfy this goal. I just came back from my second trip to Israel this year and I thought I&amp;#39;d write about my experience with the bag. The idea is that the bag is super functional with a bunch of built in features and add-ons to simplify the travel experience and help you maximize what you can pack. I ended up augmenting the bag with some packing cubes from &lt;a href=&quot;http://shop.eaglecreek.com/packing-cubes/l/212&quot;&gt;Eagle Creek&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Overall, the bag worked out pretty well and I was pretty happy with it. Once packed, it was super easy to catch my cab to the airport, get through security and get onto the plane. Here I am at the hotel on my way to the car. Essentially, just me and a backpack (a large backpack). &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/onebag/IMG_8478.JPG&quot; alt=&quot;elevator ride&quot;&gt;&lt;/p&gt;

&lt;p&gt;This work trip was a little over a week long and I brought enough clothes for the week, a toiletries bag, running stuff, my laptop and kindle, various cables, an extra battery, as well as a small messanger bag and laptop sleeve to use once I got to Tel Aviv. I also had a stainless steel water bottle and my VMware badge in the bag. I carried my phone and passport in my pants. How did that all fit in?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/onebag/IMG_8468.JPG&quot; alt=&quot;all the stuff&quot;&gt;&lt;/p&gt;

&lt;p&gt;The packing cubes really made a difference in fitting everything into the bag. I bought the bag with an optional vacuum bag and shirt folder but ended up not using them. It was quiet hot in Israel so I mostly took linen and seersucker tops. I took a linen trouser but actually ended up just wearing the pants I flew in all week, which are &lt;a href=&quot;https://shop.outlier.nyc/shop/retail/futureworks.html&quot;&gt;Outlier Futureworks&lt;/a&gt;. Those pants were AMAZING for both the plane and the crazy hot and humid weather in Israel. They aren&amp;#39;t super dressy, but they look kind of like a chino and were totally fine for my office wear and our nightly outings to Tel Aviv. They breathe well, which helped with the weather. They dry really quickly too! I gave them a mid-week wash in the hotel sink and then a quick iron in the morning before we went to the office and they were totally fine. They also have a coating that makes them a little stain resistant, so the coffee I spilled on them twice didn&amp;#39;t really have a chance to soak in.&lt;/p&gt;

&lt;p&gt;Here are the packing cubes and what went into them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/onebag/IMG_8460.JPG&quot; alt=&quot;pants and shirts&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/onebag/IMG_8461.JPG&quot; alt=&quot;underwear&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/onebag/IMG_8463.JPG&quot; alt=&quot;undershirts and running&quot;&gt;&lt;/p&gt;

&lt;p&gt;And here is the last one, all packed up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/onebag/IMG_8464.JPG&quot; alt=&quot;all packed up&quot;&gt;&lt;/p&gt;

&lt;p&gt;Overall, the bag worked out pretty great. It fit in the overhead bin on a 777-300ER, 737-800, a CRJ 200 and an ERJ 145. The last two took a little bit of squishing to make it fit, but it worked out in the end. Since everything is in that bag, the one downside was figuring out what I wanted to grab before getting in my seat. I ended up just grabbing my kindle (which was in the main compartment flap) and my external battery, USB cable and headphones for the long flight from Tel Aviv to Newark. For the other flights, I just grabbed the kindle. It was pretty easy to access, I only needed to unzip the main compartment a little to each in and pull the kindle out. The others were in the side pocket, which wasn&amp;#39;t super easy to do once I had the bag in the overhead. For the future, I&amp;#39;ll probably think a little more strategically about packing those bits before the flight to make them a little easier to grab. &lt;/p&gt;
</description>
        <pubDate>Mon, 17 Jul 2017 08:08:11 -0600</pubDate>
        <link>http://jrrickard.github.io/2017/07/17/one-bag.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2017/07/17/one-bag.html</guid>
        
        
      </item>
    
      <item>
        <title>Winter Series - The(or a) Spring Way</title>
        <description>&lt;p&gt;Getting back to the Spring and Xenon comparison, I&amp;#39;ve implemented pretty much the same participant management capability for my Race Management System using the Spring ecosystem: &lt;a href=&quot;https://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt;, &lt;a href=&quot;http://projects.spring.io/spring-data-mongodb/&quot;&gt;Spring Data MongoDB&lt;/a&gt; and &lt;a href=&quot;http://projects.spring.io/spring-data-rest/&quot;&gt;Spring Data REST&lt;/a&gt;. You can find the Github repo &lt;a href=&quot;https://github.com/jrrickard/ws-spring&quot;&gt;here&lt;/a&gt;. For this simple use case, we can provide pretty similar capabilities using these three Spring projects, although we get to the end result in a diffeerent way. The first difference is that I&amp;#39;m obviously using MongoDB for persistence instead of the native persistence that you can leverage with Xenon. This means that I need to run Mongo plus my service. I&amp;#39;ll use Docker for that. In a later post, I&amp;#39;ll get into comparing how to run multiple replicas of MongoDB or a multi-node group of Xenon here, but for now we&amp;#39;ll just compare the developer use case with both.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker run -p 27017:27017 -d mongo
f8cbf4712a228a240d17da97e0cc366807b88c215d447129d90a65481a648c30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that I have a database, I&amp;#39;ll the service using &lt;a href=&quot;http://start.spring.io/&quot;&gt;Spring Initializer&lt;/a&gt;, which is super simple! &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/spring/spring_initializer.png&quot; alt=&quot;Bootstrap the project&quot;&gt; &lt;/p&gt;

&lt;p&gt;This ends up giving me a Gradle based project skeleton and I can start building the service. I&amp;#39;ll start with the data model. I&amp;#39;m also going to be using &lt;a href=&quot;https://projectlombok.org/&quot;&gt;Lombok&lt;/a&gt; annotations to remove some boilerplate code. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jrrickard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.data.annotation.Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.data.mongodb.core.mapping.Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Document&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Participant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MALE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;FEMALE&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateOfBirth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gender&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like with the Xenon example, this is pretty simple. Next, I need to make a &lt;a href=&quot;https://docs.spring.io/spring-data/data-commons/docs/1.6.1.RELEASE/reference/html/repositories.html&quot;&gt;Spring Data Repository&lt;/a&gt; for the Participant objects.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jrrickard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.github.jrrickard.ws.model.Participant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.data.repository.CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParticipantRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Participant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When using &lt;a href=&quot;http://docs.spring.io/spring-data/rest/docs/2.6.3.RELEASE/reference/html/&quot;&gt;Spring Data Rest&lt;/a&gt; and a CRUD repository, you get a similar base capability that you&amp;#39;d get with a default Xenon stateful service. Spring goes further though and provides a number of additional capabilities, such as a PATCH operation and the ability to expose pre-defined queries.  &lt;/p&gt;

&lt;p&gt;Next, we need to create a class that will provide our service configuration.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jrrickard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.data.mongodb.repository.config.EnableMongoRepositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableMongoRepositories&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WsParticipantApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WsParticipantApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This class is pretty simple as well. The important parts here are the @SpringBootApplication and @EnableMongoRepositories annotations. This will enable Spring Boot and enable some auto configuration of the service based on the classpath defined in the gradle build&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  compile(&amp;#39;org.springframework.boot:spring-boot-starter-data-mongodb&amp;#39;)
  compile(&amp;#39;org.springframework.boot:spring-boot-starter-data-rest&amp;#39;)
  compile(&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Spring Boot will enable Spring Data MongoDB because of the @EnableMongoRepositories annotation and turn on Spring Data Rest because of the spring-boot-starter-data-rest dependency.&lt;/p&gt;

&lt;p&gt;With this in place, I can build the project and end up with an executable JAR like with the Xenon project. This will use Tomcat instead of the embedded Netty you&amp;#39;d get with Xenon. I&amp;#39;ll use Docker to run this as well. &lt;/p&gt;

&lt;p&gt;Now, I can run the service.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker run -d -p 8111:8080 -e SPRING_DATA_MONGODB_URI=mongodb://192.168.86.53:27017 -e SPRING_DATA_MONGODB_DATABASE=participnts spring-participant-service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using Postman, I can now interact with the service&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/spring/spring-data-rest-initial.png&quot; alt=&quot;Initial repository state&quot;&gt; &lt;/p&gt;

&lt;p&gt;Next, I&amp;#39;ll use Postman to create a record&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/spring/spring-data-rest-post.png&quot; alt=&quot;Postman create&quot;&gt;&lt;/p&gt;

&lt;p&gt;Thanks to the capabilities provided by Spring Data REST, I&amp;#39;ve now created a record in the database. I can retrieve it with a simple GET request&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/spring/spring-data-rest-get.png&quot; alt=&quot;New record&quot;&gt;&lt;/p&gt;

&lt;p&gt;I can also modify it with a PATCH operation and fetch it again to get the changed state.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/spring/spring-data-rest-patch.png&quot; alt=&quot;Patch request&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/spring/spring-data-rest-get-after-patch.png&quot; alt=&quot;Updated Record&quot;&gt;&lt;/p&gt;

&lt;p&gt;Using Spring, I was able to get a really simple CRUD based service up and running in only a few minutes. Almost everything is provided for you by the framework in this case, just like with Xenon. &lt;/p&gt;

&lt;p&gt;Obviously this is a pretty contrived example, but it demonstrates this simple use case using both technologies. It&amp;#39;s hard to do an apples to apples comparison of Spring and Xenon, because they strive to do different things and have very different opinons about how to do the things they have in common. For this example, Spring was a litle easier to get going with. Getting an executable JAR with a RESTful interface to do CRUD operations on data with Spring was a bit simpler because Spring does a little more for you out of the box. Xenon, on the other hand, resulted in a slightly simpler deployment because I didn&amp;#39;t need to also run MongoDB. &lt;/p&gt;

&lt;p&gt;I think the more interesting comparisons will come when comparing what building stateless and event-driven services  look like with both of the frameworks. &lt;/p&gt;
</description>
        <pubDate>Mon, 08 May 2017 19:26:16 -0600</pubDate>
        <link>http://jrrickard.github.io/2017/05/08/winter-series-the-spring-way.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2017/05/08/winter-series-the-spring-way.html</guid>
        
        
      </item>
    
      <item>
        <title>Catching Up</title>
        <description>&lt;p&gt;It&amp;#39;s been almost 6 months since my last post! I&amp;#39;m still working on my Xenon vs Spring series, but life got in the way. First a few work trips popped up, then we had a baby! Now that we&amp;#39;re past those initial months of newborn life, I&amp;#39;m back to finishing up my series on Xenon vs Spring. I&amp;#39;ll take a look at a simple CRUD service using Spring Boot + Spring Data next. After that, we&amp;#39;ll take a look at what a controller layer might look like in both.&lt;/p&gt;

&lt;p&gt;At work, I&amp;#39;ve been focusing on Kubernetes lately, so I&amp;#39;ll share some of what I&amp;#39;ve been doing there as well. We&amp;#39;ve been taking advantage of &lt;a href=&quot;https://github.com/kubernetes/kops&quot;&gt;kops&lt;/a&gt; to get some clusters up and running, but I&amp;#39;ve also been working on following the super awesome &lt;a href=&quot;https://github.com/kelseyhightower/kubernetes-the-hard-way&quot;&gt;Kubernetes The Hardway&lt;/a&gt; guide that &lt;a href=&quot;https://twitter.com/kelseyhightower&quot;&gt;Kelsey Hightower&lt;/a&gt; has put together. I&amp;#39;ve been using VMware tooling though, getting it up and running with vCenter and &lt;a href=&quot;https://github.com/vmware/vic&quot;&gt;VIC&lt;/a&gt;. That has been pretty interesting, so I&amp;#39;ll share a post about that too fairly soon.&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Apr 2017 15:40:27 -0600</pubDate>
        <link>http://jrrickard.github.io/2017/04/22/catching-up.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2017/04/22/catching-up.html</guid>
        
        
      </item>
    
      <item>
        <title>Winter Series - the Xenon implementation. Part 1</title>
        <description>&lt;p&gt;This week ended up being a little crazy and I haven&amp;#39;t had enough time to really devote to writing up the Xenon vs Spring comparison, so I&amp;#39;m going to break this up into more managable pieces. I also decided to tackle the Xenon app first.  &lt;/p&gt;

&lt;p&gt;I won&amp;#39;t get into &lt;a href=&quot;https://github.com/vmware/xenon&quot;&gt;Xenon&lt;/a&gt; fundamentals too much in this post, but in general you build capabilities using  cooperating REST services. Xenon lets you build REST services, but also provides a mechanism for persistence and replication of data as well as built in query capabilities. &lt;/p&gt;

&lt;p&gt;In the Xenon world, services fall into two main types of services: stateful and stateless. At the heart of stateful services is something called a Plain Old Data Object, or a PODO. Under the covers, Xenon uses Lucene as a persistence mechanism and provides services on top of Lucene to handle replication to enable building distributed stateful services across many Xenon nodes. Within a stateful service, you implement logic to handle the persistence/management of a PODO. Stateful services can also be used to model Tasks, via &lt;a href=&quot;https://github.com/vmware/xenon/wiki/Task-Service-Tutorial&quot;&gt;Task Services&lt;/a&gt;. Stateless services, on the other hand, do not represent some sort of state like a Stateful service. &lt;/p&gt;

&lt;p&gt;Some important things to keep in mind with Xenon is that it isn&amp;#39;t really intended to facilitate building things using normal object oriented design. It discourages inheritance and focuses on code-reuse through composition of stateless helper services or stateless utility classes, so not really composition in the sense of OO design. Since it is Java based, a lot of the framework makes use of fairly limited reuse through inheritance (like handleXXX operations in services), but you should strive not to go down that path. It also very highly discourages blocking operations. Working with within these constraints took some adjustment for me. When I first started implementing the Winter Series app, I made the mistake of emebedding logic into stateful services (base classes) and tried to share this into my services through inheritance. This didn&amp;#39;t work that well in practice and also caused some issues with testing the code. Writing testable code when I violated the Xenon principles actually became pretty difficult and more or less forced me into writing code that I think fit a little better with the model. As an example, I had wrote some Task services that did some blocking calls to a client library that called an external service. Writing unit tests for the Task service was actually quite difficult because I could not Mock the service easily. This led me to refactor into a stateless utility class that I interacted with via a stateless helper service.  That was much easier to provide a mock implementation of, which I think led to more testable code. &lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take a look at the building blocks of my Winter Series app, starting with a Participant. I need to be able to do CRUD operations of race participants, so we need a PODO and a Service to deal with it. &lt;/p&gt;

&lt;p&gt;First, the PODO:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jrrickard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.vmware.xenon.common.ServiceDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.vmware.xenon.common.ServiceDocumentDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Participant&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceDocument&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MALE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;FEMALE&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@UsageOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceDocumentDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PropertyUsageOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTO_MERGE_IF_NOT_NULL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@UsageOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceDocumentDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PropertyUsageOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTO_MERGE_IF_NOT_NULL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@UsageOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceDocumentDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PropertyUsageOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTO_MERGE_IF_NOT_NULL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateOfBirth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@UsageOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceDocumentDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PropertyUsageOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTO_MERGE_IF_NOT_NULL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gender&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@UsageOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceDocumentDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PropertyUsageOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTO_MERGE_IF_NOT_NULL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@UsageOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceDocumentDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PropertyUsageOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTO_MERGE_IF_NOT_NULL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a pretty simple example. The AUTO_MERGE_IF_NOT_NULL will enable me to write a little bit less logic in the service when I implement PATCH on participants (a future post). It&amp;#39;s really just a Java representation the object that will be serialized as JSON and stored in Lucene via the service, much the same way you might write objects to use with another serialization library like &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now for the service:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jrrickard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.vmware.xenon.common.StatefulService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.github.jrrickard.ws.state.Participant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParticipantService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatefulService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FACTORY_LINK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/ws/participants&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ParticipantService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Participant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toggleOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PERSISTENCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toggleOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;REPLICATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toggleOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OWNER_SELECTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This simple service gives me the Create (via a POST operation to /ws/participants), Retrieve (via GET operation to /ws/participant/id), Update (via a PUT operation) and Delete (via a DELETE operation), inherited from the StatefulService class. The PUT operation will simpy replace the state with whatever is passed as the body of the PUT. If I want to change any of this behavior, I can just override any of the methods from the StatefulService class. The FACTORY_LINK static helps Xenon to know the URI for this service. In earlier versions, you needed to define both a FactoryService, which created the lifecycle of your Service instances, as well as the Service itself. That was changed and now you can simply define the service like this. You can also implement additional HTTP verbs, such as PATCH simply by overriding the StatefulService class.  &lt;/p&gt;

&lt;p&gt;With the two classes above, I just need to build a Xenon ServiceHost. This is another pretty simple class:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jrrickard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.vmware.xenon.common.ServiceHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.vmware.xenon.services.common.RootNamespaceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.github.jrrickard.ws.service.ParticipantService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WinterSeries&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceHost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceHost&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;startDefaultCoreServicesSynchronously&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RootNamespaceService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ParticipantService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WinterSeries&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WinterSeries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running this will start up the Participant factory service (POSTing to this will create new service instances -- one for each participant). I started this up by running the service host via the shaded jar produced by the Gradle build like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java -jar build/libs/ws-xenon-1.0-snapshot-standalone.jar --sandbox&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/ws
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;I&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;1477019153298&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;8000&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;startImpl&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;ServiceHost/0f68f721 listening on http://127.0.0.1:8000&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;I&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;1477019155321&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;8000/core/node-groups/default&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;mergeRemoteAndLocalMembership&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;State updated, merge with 61c60cff-fa9e-4362-a6b5-3e9863f39693, self 61c60cff-fa9e-4362-a6b5-3e9863f39693, 1477019155320001&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;I&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;1477019158320&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;8000/core/node-selectors/default&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;checkAndScheduleSynchronization&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;Scheduling synchronization &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; nodes&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;I&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;1477019158320&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;8000/core/node-selectors/default-3x&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;checkAndScheduleSynchronization&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;Scheduling synchronization &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; nodes&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;I&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;1477019158320&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;8000&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;scheduleNodeGroupChangeMaintenance&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;/core/node-selectors/default 1477019158320001&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;I&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;1477019158321&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;8000&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;scheduleNodeGroupChangeMaintenance&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;/core/node-selectors/default-3x 1477019158321012&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see from the output, this started up on port 8000. You could run it without the sandbox argument, but I needed that because I&amp;#39;ve run another service on this laptop and it clashed with the state in my service (more on that later). &lt;/p&gt;

&lt;p&gt;I can then use a browser to examine the service :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/xenon/query-in-browser.png&quot; alt=&quot;Query browser&quot;&gt; &lt;/p&gt;

&lt;p&gt;Next, I&amp;#39;ll use Postman to create a record&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/xenon/xenon-post.png&quot; alt=&quot;Postman create&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now if I query again (using Postman again..)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/xenon/get-participants.png&quot; alt=&quot;Postman GET&quot;&gt;&lt;/p&gt;

&lt;p&gt;What happened here, is that first we made a POST to the ParticipantService factory. The body of this was then turned into a ParticipantService instance, with the state represented by our Participant PODO. Xenon took care of creating this for me through the StatefulService base code. When I then issued the GET request to the /ws/participants endpoint, it did a query to find all ParticipantService instances. In this case, there is only one.&lt;/p&gt;

&lt;p&gt;I can then issue a GET request to get that specific service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/xenon/specific-record.png&quot; alt=&quot;Postman GET Service instance&quot;&gt;&lt;/p&gt;

&lt;p&gt;This time, the request was handled by the default handleGet() method in StatefulService. Nice an easy to build a really simple CRUD service.
I could easily run this as a multi-node cluster now and the use of the options in the ParticipantService constructor would tell Xenon to take care of replication and owner selection for me. You can also see the default pieces of data from the ServiceDocument, like the version. Xenon will also handle that for you, allowing you to query for different versions of your service instance. If I issue changes to the service instance, that version counter will change automatically. &lt;/p&gt;

&lt;p&gt;There isn&amp;#39;t a LOT of boiler plate code here and it was fairly simple to make this single object, but it is a simple case. In my ServiceHost, the line that actually starts my ParticipantService up is  super.startFactory(new ParticipantService()); &lt;/p&gt;

&lt;p&gt;This creates the ParticipantService Factory Service, using the FACTORY_LINK defined in the class. This is what responded to the POST call and created the instance of the service. As I add more services, I just need to call startFactory or startService on them. &lt;/p&gt;

&lt;p&gt;In the next post, I&amp;#39;ll show a more complicated example involving links between PODOs and collections, as well as building out the app a little more with an architeture that fits a little more with what we&amp;#39;ve done on my project at work. I&amp;#39;ll also make some changes to better handle things like that default pattern for the date of birth and add in validation.  &lt;/p&gt;
</description>
        <pubDate>Thu, 20 Oct 2016 19:28:41 -0600</pubDate>
        <link>http://jrrickard.github.io/2016/10/20/winter-series-the-xenon-impl.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2016/10/20/winter-series-the-xenon-impl.html</guid>
        
        
      </item>
    
      <item>
        <title>Comparing Spring and Xenon</title>
        <description>&lt;p&gt;In my last job, our Java development exclusively used the &lt;a href=&quot;https://spring.io/&quot;&gt;Spring&lt;/a&gt; ecosystem. In my current job, we&amp;#39;re instead using &lt;a href=&quot;https://vmware.github.io/xenon/&quot;&gt;Project&lt;/a&gt; &lt;a href=&quot;https://github.com/vmware/xenon&quot;&gt;Xenon&lt;/a&gt;. Both frameworks enable you to build services, but help you get there with pretty different approaches. To provide some comparison between the two, I&amp;#39;ve gone ahead and built the same application twice: one using Spring and one using Xenon. You can accomplish a LOT with both the Spring ecosystem and Xenon, but I&amp;#39;ve chosen to keep this fairly simply and compare a fairly simple application. I originally wrote the app to better learn Xenon (for the day job) and to help automate some of my volunteer responsibilities with the &lt;a href=&quot;https://pprrun.org/&quot;&gt;Pikes Peak Road Runners&lt;/a&gt;. The app exposes a REST API for managing race and participant data for a series of winter running races the club holds. I&amp;#39;ve been acting as the registrar for the series for a few years now and the process has been fairly manual and prone to human (me) data entry errors. I wanted to make it a little easier, and learn Xenon a little more, so I wrote the app. It&amp;#39;s extra timely because we&amp;#39;re expecting our second child around the time of the race series, so I&amp;#39;ll probably have much less time to volunteer this year. I&amp;#39;ve decided to offer a comparison point to Xenon using Spring since it&amp;#39;s a pretty popular choice in the Java world and I expect many people have some familiarity with it.  &lt;/p&gt;

&lt;p&gt;The Spring based application is written using Spring Boot, Spring MVC, Spring Data and a Mongo DB instance. I need to add everything to github still, but when I do there will be a some scripts to build the source, package as Docker and a Docker compose file that will run the app. The Xenon app, on the otherhand, is written only using the Xenon framework. Xenon makes use of Lucene as a persistence layer, so it does not need an external database. &lt;/p&gt;

&lt;p&gt;Stay tuned for three blog posts this week: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, I will walk through the Spring app&lt;/li&gt;
&lt;li&gt;Next, I will walk through the Xenon app&lt;/li&gt;
&lt;li&gt;I&amp;#39;ll offer my thoughts comparing the two.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 16 Oct 2016 20:07:21 -0600</pubDate>
        <link>http://jrrickard.github.io/2016/10/16/comparing-spring-and-xenon.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2016/10/16/comparing-spring-and-xenon.html</guid>
        
        
      </item>
    
      <item>
        <title>Marathon-LB and Zero Downtime Deployments</title>
        <description>&lt;p&gt;We&amp;#39;re currently using Marathon-lb to act as a sort of service discovery for our application and the services we are deploying. With our application, we need to deploy a new cluster for our application and initiate a data migration when we need to update. This poses a problem with our current use of Google&amp;#39;s Load Balancer and Marathon-lb, namely the use of service ports. After trying a few things, we settled on creating another load balancer pointing at a new service port and swapping our DNS records. That&amp;#39;s somewhat time consuming though and extra for us to automate for upgrades. After reading the &lt;a href=&quot;https://github.com/mesosphere/marathon-lb/blob/master/README.md#zero-downtime-deployments&quot;&gt;Zero Downtime Deployments&lt;/a&gt; section of the Marathon-lb documentation, it sounded like a decent fit for what we needed. Not a 100% fit given our deploy-&amp;gt;migrate upgrade sequence, which can take 15+ minutes to complete, but close. I decided to try to get the Marathon-lb portion of this working using the HAPROXY_ labels described in the documentation.&lt;/p&gt;

&lt;p&gt;This failed with lots of Python errors, and I believe it is due to the older version of Marathon-lb we are running. We haven&amp;#39;t fully migrated our production environments to DC/OS yet, and we&amp;#39;re running a version of Marathon-lb that is quite old in the scope of Marathon&amp;#39;s life. I decided to try this out with my DC/OS lab and spun up the latest Marathon-lb instance. I decided to run this outside of Marathon because I was experimenting with a number of config options and it was easier to just run via the command line....and I only have one agent currently so that&amp;#39;s not a big deal. I&amp;#39;ve settled on the config I want, so I can migrate it back into Marathon now. &lt;/p&gt;

&lt;p&gt;Following the steps described MOSTLY worked. I simply changed our JSON definition to include:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HAPROXY_DEPLOYMENT_GROUP=csp
HAPROXY_DEPLOYMENT_ALT_PORT=10101
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running that, I saw it pick up both applications after I deployed the new containers:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;marathon_lb: fetching apps
marathon_lb: GET http://master.mesos:8080/v2/apps?embed=apps.tasks
marathon_lb: got apps [&amp;#39;/csp-host&amp;#39;, &amp;#39;/csp-host-2&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, it immediately started spewing Python errors:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;marathon_lb: Unexpected error!
Traceback (most recent call last):
  File &amp;quot;/marathon-lb/marathon_lb.py&amp;quot;, line 1357, in do_reset
    self.__apps = get_apps(self.__marathon)
  File &amp;quot;/marathon-lb/marathon_lb.py&amp;quot;, line 1178, in get_apps
    int(new[&amp;#39;labels&amp;#39;][&amp;#39;HAPROXY_DEPLOYMENT_TARGET_INSTANCES&amp;#39;])
KeyError: &amp;#39;HAPROXY_DEPLOYMENT_TARGET_INSTANCES&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The documentation suggested that wasn&amp;#39;t something you should NEED to set, but it showed up nonetheless. I&amp;#39;m guessing that because I was not using the Zero Downtime Deployment scripts, I needed to provide this. This was pretty easy to fix, I just needed to add that label to the JSON config.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HAPROXY_DEPLOYMENT_GROUP=csp
HAPROXY_DEPLOYMENT_TARGET_INSTANCES=3
HAPROXY_DEPLOYMENT_ALT_PORT=10101
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After adding that and waiting for the app to restart, I was able to access both of my application clusters via the same service port.&lt;/p&gt;

&lt;p&gt;Since we can&amp;#39;t really use the ZDD script, I made my own Python script that handles our use case....namely:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetch a task from the old cluster&lt;/li&gt;
&lt;li&gt;Get the IP and Port combo&lt;/li&gt;
&lt;li&gt;Grab a task from the new cluster&lt;/li&gt;
&lt;li&gt;Get the IP and Port combo&lt;/li&gt;
&lt;li&gt;Build an upgrade request to the new task using the old task as the source node&lt;/li&gt;
&lt;li&gt;Wait for the upgrade request to finish&lt;/li&gt;
&lt;li&gt;Modify the new cluster to add the tags above.&lt;/li&gt;
&lt;li&gt;Trigger a tag of the image in Bintray to represent our currently deployed state&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last step was really the important part to keep the new cluster from receiving traffic before the upgrade is complete. Once the upgrade is complete and we&amp;#39;ve verified the new instance, the old one can be removed from Marathon. &lt;/p&gt;
</description>
        <pubDate>Wed, 10 Aug 2016 15:51:48 -0600</pubDate>
        <link>http://jrrickard.github.io/2016/08/10/marathon-lb-and-zero-downtime-deployments.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2016/08/10/marathon-lb-and-zero-downtime-deployments.html</guid>
        
        
      </item>
    
      <item>
        <title>Installing CentOS and DC/OS</title>
        <description>&lt;p&gt;With all my hardware setup, I need to install an OS and then setup DC/OS. The DC/OS installation scripts are somewhat limited in what they will operate with out of the box, primarily CentOS and CoreOS. CentOS is a little more in line with what I need right now, so I&amp;#39;ve decided to do that. &lt;/p&gt;

&lt;h1&gt;Installing CentOS&lt;/h1&gt;

&lt;p&gt;I chose to do a minimal installation of CentOS and add from there. I went back and forth on installing via PXE or USB and decided to go with the USB installation because I already had the CentOS ISO written to a USB stick. &lt;/p&gt;

&lt;p&gt;After getting everything up and running, I did go back and configure my Synology to act as a PXE boot server and that has worked out pretty well. I&amp;#39;ll do another post on that later. &lt;/p&gt;

&lt;h2&gt;Setup SSH Keys&lt;/h2&gt;

&lt;p&gt;Once I had everything setup, I went ahead and added my SSH keys to the server. This turned out to be a good thing to do, as the DC/OS installation makes use of SSH keys to remotely connect to the nodes you&amp;#39;ll be configuring, so go ahead and do that now for the user you plan on installing DC/OS with. I used ssh-copy-id, which isn&amp;#39;t installed by default on MacOS X, but is super easy to install with &lt;a href=&quot;http://brew.sh/&quot;&gt;homebrew&lt;/a&gt;. If you&amp;#39;d like to do that, it&amp;#39;s as easy as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ brew install ssh-copy-id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Network Configuration&lt;/h2&gt;

&lt;p&gt;I also went ahead and configured the CentOS machines to use static IP addresses. DC/OS runs into issues when the IP addresses change, so DHCP wasn&amp;#39;t really an option in this case. I&amp;#39;ve configured my DHCP server to exclude a range of IP addresses, so I allocated three from that range to these servers. I also setup a DNS server on my Synology NAS and configured them to use that DNS to make things a little easier. &lt;/p&gt;

&lt;h1&gt;Installing DC/OS Requirements&lt;/h1&gt;

&lt;p&gt;With my CentOS installs ready, I needed to start installing the prerequisites for DC/OS. For my setup, I was going with one bootstrap node, one master and one public agent. I&amp;#39;m planning on adding additional agents later with some additional Intel NUCs that I&amp;#39;ve ordered. The installation of the requirements is really pretty straight forward: Python (2.7) and Docker. The DC/OS installation process will actually take care of installing the other dependencies for you.  &lt;/p&gt;

&lt;p&gt;My DC/OS installation is going to use the &lt;a href=&quot;https://dcos.io/docs/1.7/administration/installing/custom/gui/&quot;&gt;GUI&lt;/a&gt; installation method, and you can find the complete list of prereqs in the DC/OS &lt;a href=&quot;https://dcos.io/docs/1.7/administration/installing/custom/system-requirements/&quot;&gt;docs&lt;/a&gt;. I should note that I didn&amp;#39;t actually meet all the requirements in terms of hardware and my DC/OS instance is running OK for my lab needs. &lt;/p&gt;

&lt;h2&gt;Python, Pip, Virtualenv&lt;/h2&gt;

&lt;p&gt;My CentOS 7 installation did come with compatible version of Python, so that pre-req was already satisfied. Next, you&amp;#39;ll need to install pip and virtualenv so that the bootstrap process can install the other dependencies, along with the DC/OS components. My CentOS installation did not come with pip, so here are the steps I followed to get pip running. I decided to use yum to install pip, but you could take an &lt;a href=&quot;https://pip.pypa.io/en/stable/installing/&quot;&gt;alternate approach&lt;/a&gt;.  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ yum install epel-release

$ yum -y update

$ yum install python-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This installed a somewhat old version of pip install, so I also went ahead and did a pip upgrade using pip.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  pip install --upgrade pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last Python related dependency was virtualenv, and I went ahead and installed that with pip as well.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Docker&lt;/h2&gt;

&lt;p&gt;Next, we need to install Docker on all the nodes. CentOS doesn&amp;#39;t come with Docker installed and the yum repo that it&amp;#39;s configured with comes with a pretty old version of Docker. Luckily, the CentOS &lt;a href=&quot;https://docs.docker.com/engine/installation/linux/centos/&quot;&gt;installation guide&lt;/a&gt; is pretty detailed. The only major deviation for me was I decided to use systemd to manager Docker. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;systemctl enable docker
systemctl start docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, will also use devicemapper with a thin-pool as the storage driver, which will cause the DC/OS preflight checks to fail and is generally not recommended. Instead, it was easier to use the overlay driver in my case vs configuring LVM2 with devicemapper. Here is my systemd drop-in. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@dcos-agent-1 ~]# more /etc/systemd/system/docker.service.d/override.conf 
[Service]
ExecStart=
ExecStart=/usr/bin/docker daemon --storage-driver=overlay -H fd://
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;DC/OS Install&lt;/h1&gt;

&lt;p&gt;With Python and Docker installed, I moved on to the DC/OS install. Following the GUI instructions was mostly straight forward, however it requires a network discovery script for the local/custom installation I was doing. To create a network discovery script, I followed the guidelines from the CLI install&lt;/p&gt;

&lt;p&gt;Next, I made a directory to hold the dcos-install script and used curl to download it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir -p /tmp/dcos-install
$ cd /tmp/dcos-install
$ curl -O https://downloads.dcos.io/dcos/EarlyAccess/dcos_generate_config.sh
$bash dcos_generate_config.sh --web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once that was done, I launched Chrome and pointed at my bootstrap node on port 9000.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/dcos/dcos-install-screen.png&quot; alt=&quot;install-gui&quot;&gt;&lt;/p&gt;

&lt;p&gt;Launching this wizard takes you to an installation form. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/dcos/deployment-settings.png&quot; alt=&quot;install-gui-2&quot;&gt;&lt;/p&gt;

&lt;p&gt;Complete the form, populating everything with config specific to your environment. As you can see, this will ask you for the ssh key and the IP detection script I mentioned earlier. One annoying thing about the form is the error checking seems to only trigger when modifying a given box, so I needed to go back and change some values to get the verification to retrigger. Once everything is entered, click the Run Pre-Flight button. This will start the Pre Flight checks, which could take some time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/dcos/pre-flight.png&quot; alt=&quot;install-gui-3&quot;&gt;&lt;/p&gt;

&lt;p&gt;If all goes well, you should see the following.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/dcos/pre-flight-complete.png&quot; alt=&quot;install-gui-3&quot;&gt;&lt;/p&gt;

&lt;p&gt;For me, I did not see that screen the first time I tried to run the pre-flight. Fix any errors and try again. For me it was the use of devicemapper with thin-pool storage. Once I changed to the overlay storage driver, I was all set.  &lt;/p&gt;

&lt;p&gt;Finally you can deploy the DC/OS cluster and run the post-flight checks. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/dcos/dcos-installed.png&quot; alt=&quot;install-gui-3&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now, you can try and login to your DC/OS install. In my case, it actually took several minutes from when it was complete in the installer GUI to when it was available in the browser. DC/OS will use a number of external authentication sources, I chose to use my Google account.&lt;/p&gt;

&lt;p&gt;Here is what it looks like now, with a couple of tasks running via Marathon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/dcos/dcos-runnning.png&quot; alt=&quot;install-gui-3&quot;&gt;&lt;/p&gt;

&lt;p&gt;This is a pretty minimal installation, no custom configuration needed in my case. But it was pretty easy to get up and running and I can use it for testing code I&amp;#39;m currently working on and can run several instances of our application. Adding public agents should be pretty straight forward once my new hardware arrives, giving me the ability to run even more workload. &lt;/p&gt;

&lt;h1&gt;DCOS Uninstall&lt;/h1&gt;

&lt;p&gt;If you&amp;#39;re like me, and something goes wrong and you want to start over, you first need to uninstall DC/OS. This is done by:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bash dcos_generate_config.sh --uninstall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Wed, 27 Jul 2016 11:38:37 -0600</pubDate>
        <link>http://jrrickard.github.io/2016/07/27/installing-centos-and-dc-os.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2016/07/27/installing-centos-and-dc-os.html</guid>
        
        
      </item>
    
      <item>
        <title>Setting Up Local DC/OS Lab - Part One</title>
        <description>&lt;p&gt;In my new role, I&amp;#39;m working pretty extensively with Marathon and Mesos. Prior to moving to my home office, I setup a Marathon and Mesos cluster using my &lt;a href=&quot;/3d-printing,nuc,lab/2014/08/05/3d-print-all-the-things.html&quot;&gt;Link text&lt;/a&gt; lab. That lab was still in the office taking up (limited) space on someone&amp;#39;s desk so I&amp;#39;ve still been using it, but the network connectivity between my hosue and the office meant that I had noticable delay when transfering Docker images to the docker registry running on the lab. On Friday, I decided to bring it home and set it up in my basement. &lt;/p&gt;

&lt;p&gt;I could keep the cluster running as is, but I&amp;#39;ve decided to reinstall it using DC/OS instead of simply installing Marathon and Mesos again. I&amp;#39;ve also decided to recreate the storage volume on the NAS, as it still contained things from my previous role that I no longer needed. This will be a totally clean rebuild of the lab then! I&amp;#39;ll need to setup the NAS again, along with the hosts, followed by the DC/OS setup. I&amp;#39;ll also need to run a docker registry to support what I am doing. I&amp;#39;ll use the NAS to provide storage for the docker registry and mostly use the host storage for the Mesos agents, although I&amp;#39;ll also do some research for persistent volumes from Mesos and will use it. It&amp;#39;s got around 2 TB of storage if I set it up with RAID1. &lt;/p&gt;

&lt;p&gt;My original plan was to run &lt;a href=&quot;https://coreos.com/&quot;&gt;CoreOS&lt;/a&gt; on the hosts, but I don&amp;#39;t think that really fits with my needs right now (i.e. I don&amp;#39;t need etcd or other features of CoreOS right now), so  I&amp;#39;ll revisit that later. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/pxeboot.png&quot; alt=&quot;pxeboot&quot;&gt;&lt;/p&gt;

&lt;p&gt;I was able to setup a PXE boot server using my NAS, since Synology supports that pretty well. In the short term, I thought I would  use &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; since I know that I can install that on the NUCs without much troubleshooting. However, Ubuntu is currently not supported by the DC/OS installation scripts, so I&amp;#39;ll use &lt;a href=&quot;https://www.centos.org/&quot;&gt;CentOS&lt;/a&gt;. This will be a mirror of what we&amp;#39;re using in production at the moment. I previously had to make some BIOS changes to get Ubuntu running on the NUCs, so I&amp;#39;m guessing I&amp;#39;ll need to do something similar for CentOS.    &lt;/p&gt;

&lt;p&gt;I currently have the hardware setup in the basement, using some old entertainment centers to hold everything. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/basement_lab.png&quot; alt=&quot;lab&quot;&gt;&lt;/p&gt;

&lt;p&gt;In the next blog, I&amp;#39;ll cover getting CentOS running on the hosts. After that, I&amp;#39;ll follow up with getting DC/OS running. I currently have the bare minimum for running DC/OS, so I think I&amp;#39;ll probably buy another NUC or two over the coming weeks and add them as Mesos agents. &lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jul 2016 20:22:26 -0600</pubDate>
        <link>http://jrrickard.github.io/2016/07/23/setting-up-local-dc-os-lab.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2016/07/23/setting-up-local-dc-os-lab.html</guid>
        
        
      </item>
    
      <item>
        <title>Painful Lesson</title>
        <description>&lt;p&gt;We are using &lt;a href=&quot;http://mesos.apache.org/&quot;&gt;Mesos&lt;/a&gt; and &lt;a href=&quot;https://mesosphere.github.io/marathon/&quot;&gt;Marathon&lt;/a&gt; to run our Dockerized system. In the matter of two days, I learned a painful lesson. Namely, the following is a terrible, terrible practice:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;docker&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;repo/image-name:latest&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;forcePullImage&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;network&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;BRIDGE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;portMappings&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;quot;containerPort&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;quot;hostPort&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using forcePullImage : true and the latest tag on the image goes really badly when you implement CD and push images with breaking changes to your repository. In our current deployment scenario, we run a cluster of three containers. The implication with forcePullImage : true is that anytime the container is restarted, it will pull the latest of whatever image is specified and start with that. That is GREAT for testing out new changes when you manually initiate a restart across the cluster. That is TERRIBLE when one of the containers dies and restarts with the new image, leading to an inconsistent cluster. This of course happened overnight in our staging environment!&lt;/p&gt;

&lt;p&gt;We&amp;#39;re now pushing images that make it through our image promotion process with specific tags and we are not using the forcePullImage setting. This poses an issue: what if we DO want to have it pull the image? Really, the solution here is another tag. If there is a problem with the image, it should be replaced with a new verison. &lt;/p&gt;

&lt;p&gt;If you DO need to force an image pull, you can change the Marathon configuration to specify that, causing a restart (after the pull). You&amp;#39;d likely want to then change it again to change it back, but this would also result in a restart. Another option might be to run a non-container task and execute &amp;#39;docker pull&amp;#39; on each of the Agents (slaves in old Mesos terminology). That might look something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
  &amp;quot;id&amp;quot;: &amp;quot;test-pull&amp;quot;,
  &amp;quot;instances&amp;quot;: 3,
  &amp;quot;mem&amp;quot;: 128.0,
  &amp;quot;cpus&amp;quot;: 1,
  &amp;quot;cmd&amp;quot;: &amp;quot;sudo docker pull %%IMAGE_NAME%%&amp;quot;,
  &amp;quot;constraints&amp;quot;: [
    [
      &amp;quot;hostname&amp;quot;,
      &amp;quot;UNIQUE&amp;quot;
    ]
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, you&amp;#39;d want to replace the instances attribute with the number of agents in your cluster. The hostname : UNIQUE constraint should force this to run on each of the agents.&lt;/p&gt;

&lt;p&gt;This probably isn&amp;#39;t the greatest use of Marathon, as it will run this task over and over again. Once it is run, you probably want to delete the app from Marathon to prevent this. A better alternative might be to use &lt;a href=&quot;https://mesos.github.io/chronos/&quot;&gt;Chronos&lt;/a&gt; or &lt;a href=&quot;https://github.com/klarna/eremetic&quot;&gt;Eremetic&lt;/a&gt; &lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jul 2016 10:42:45 -0600</pubDate>
        <link>http://jrrickard.github.io/2016/07/20/hard-lesson.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2016/07/20/hard-lesson.html</guid>
        
        
      </item>
    
      <item>
        <title>2FA</title>
        <description>&lt;p&gt;I&amp;#39;m working on SaaS things lately and I decided to check out the SaaS based 2FA providers. I did a Google search for &amp;quot;SaaS 2FA&amp;quot; and the first response I got was &lt;a href=&quot;https://duo.com/&quot;&gt;duo security&lt;/a&gt;, which happens to be based in my home state of Michigan!&lt;/p&gt;

&lt;p&gt;Taking a look a their website, they have quite a few &lt;a href=&quot;https://duo.com/solutions/features/supported-applications&quot;&gt;integrations&lt;/a&gt;. One of them is PAM support, so I thought I&amp;#39;d check that out. I fired up a CentOS VM and followed their &lt;a href=&quot;https://duo.com/docs/duounix&quot;&gt;docs&lt;/a&gt; and within about 5 minutes I had two-factor auth enabled for my linux VM.&lt;/p&gt;

&lt;p&gt;First, I needed to grab some dependencies since I was running CentOS minimal, mainly a C compiler and both the pam-devel and openssl-devl libraries.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; yum group install &lt;span class=&quot;s2&quot;&gt;&amp;quot;Development Tools&amp;quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; yum install pam-devel
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; yum install openssl-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One that was completed, I grabbed the source and built the duo unix package with pam support.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; wget https://dl.duosecurity.com/duo_unix-latest.tar.gz
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; tar zxf duo_unix-latest.tar.gz
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;duo_unix-1.9.18
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./configure --with-pam --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, I modified the /etc/pam.d/sshd config file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/pam-config.png&quot; alt=&quot;conf&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;auth       required pam_env.so
auth       sufficient pam_duo.so
auth       required pam_deny.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and changed the value of ChallengeResponseAuthentication in my /etc/ssh/sshd_config file to yes. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ChallengeResponseAuthentication yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, I restarted ssdh&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; systemctl restart bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once I tried to login via SSH, I was promted to enroll at the URL given. I loaded that up in the browser and entered my phone number. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/duo-enroll.png&quot; alt=&quot;enroll&quot;&gt;&lt;/p&gt;

&lt;p&gt;I opened a new SSH session and got the 2FA promptes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/duo-login.png&quot; alt=&quot;login&quot;&gt;&lt;/p&gt;

&lt;p&gt;I selected the push option and got a notification on my phone almost immediately.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jrrickard.github.io/images/duo-app-push.png&quot; alt=&quot;push notification&quot;&gt;&lt;/p&gt;

&lt;p&gt;Pretty cool.&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jul 2016 10:47:57 -0600</pubDate>
        <link>http://jrrickard.github.io/2016/07/01/2fa.html</link>
        <guid isPermaLink="true">http://jrrickard.github.io/2016/07/01/2fa.html</guid>
        
        
      </item>
    
  </channel>
</rss>
